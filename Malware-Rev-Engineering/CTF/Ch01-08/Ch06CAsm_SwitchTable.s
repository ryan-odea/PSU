	.file	""
	.text
	.globl	msg
	.data
	.align 32
	.type	msg, @object
	.size	msg, 362
msg:
	.ascii	"Switch statements are often implemented using a switch table"
	.ascii	" that consists\nof pointers to code that are i"
	.string	"ndexed by the value of the integer being\ntested.  In this assignment, you you will need to decode the switch table to\nfind out the value that will unlock the level.  The assembly output of the\nprogram is included in a .s file for your viewing convenience\n\n"
	.section	.rodata
.LC0:
	.string	"%s"
	.text
	.globl	print_msg
	.type	print_msg, @function
print_msg:
.LFB6:
	.cfi_startproc
	pushl	%ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	movl	%esp, %ebp
	.cfi_def_cfa_register 5
	subl	$24, %esp
	subl	$12, %esp
	pushl	$msg
	call	strlen
	addl	$16, %esp
	movl	%eax, -12(%ebp)
	movl	$0, -24(%ebp)
	jmp	.L2
.L3:
	movl	-24(%ebp), %eax
	movl	$0, %edx
	divl	-12(%ebp)
	movl	%edx, %eax
	movzbl	msg(%eax), %eax
	movsbl	%al, %ecx
	movl	-24(%ebp), %eax
	addl	$1, %eax
	movl	$0, %edx
	divl	-12(%ebp)
	movl	%edx, %eax
	movzbl	msg(%eax), %eax
	movsbl	%al, %eax
	addl	%ecx, %eax
	addl	%eax, -20(%ebp)
	movl	-24(%ebp), %eax
	addl	$1, %eax
	movl	$0, %edx
	divl	-12(%ebp)
	movl	%edx, %eax
	movzbl	msg(%eax), %eax
	movsbl	%al, %ecx
	movl	-24(%ebp), %eax
	addl	$2, %eax
	movl	$0, %edx
	divl	-12(%ebp)
	movl	%edx, %eax
	movzbl	msg(%eax), %eax
	movsbl	%al, %eax
	addl	%ecx, %eax
	addl	%eax, -16(%ebp)
	addl	$1, -24(%ebp)
.L2:
	movl	-12(%ebp), %eax
	imull	$100, %eax, %eax
	cmpl	%eax, -24(%ebp)
	jb	.L3
	movl	-20(%ebp), %eax
	cmpl	-16(%ebp), %eax
	jne	.L4
	subl	$8, %esp
	pushl	$msg
	pushl	$.LC0
	call	printf
	addl	$16, %esp
	jmp	.L6
.L4:
	subl	$8, %esp
	pushl	$msg
	pushl	$.LC0
	call	printf
	addl	$16, %esp
.L6:
	nop
	leave
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
.LFE6:
	.size	print_msg, .-print_msg
	.section	.rodata
.LC1:
	.string	"Enter the password: "
.LC2:
	.string	"%d"
.LC3:
	.string	"Try again."
.LC4:
	.string	"Good Job."
	.text
	.globl	main
	.type	main, @function
main:
.LFB7:
	.cfi_startproc
	leal	4(%esp), %ecx
	.cfi_def_cfa 1, 0
	andl	$-16, %esp
	pushl	-4(%ecx)
	pushl	%ebp
	movl	%esp, %ebp
	.cfi_escape 0x10,0x5,0x2,0x75,0
	pushl	%ecx
	.cfi_escape 0xf,0x3,0x75,0x7c,0x6
	subl	$20, %esp
	movl	%gs:20, %eax
	movl	%eax, -12(%ebp)
	xorl	%eax, %eax
	call	print_msg
	subl	$12, %esp
	pushl	$.LC1
	call	printf
	addl	$16, %esp
	subl	$8, %esp
	leal	-16(%ebp), %eax
	pushl	%eax
	pushl	$.LC2
	call	__isoc99_scanf
	addl	$16, %esp
	movl	-16(%ebp), %eax
	subl	$29294, %eax
	cmpl	$4, %eax
	ja	.L8
	movl	.L10(,%eax,4), %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L10:
	.long	.L9
	.long	.L11
	.long	.L12
	.long	.L11
	.long	.L9
	.text
.L9:
	subl	$12, %esp
	pushl	$.LC3
	call	puts
	addl	$16, %esp
	jmp	.L13
.L11:
	subl	$12, %esp
	pushl	$.LC3
	call	puts
	addl	$16, %esp
	jmp	.L13
.L12:
	subl	$12, %esp
	pushl	$.LC4
	call	puts
	addl	$16, %esp
	jmp	.L13
.L8:
	subl	$12, %esp
	pushl	$.LC3
	call	puts
	addl	$16, %esp
.L13:
	movl	$0, %eax
	movl	-12(%ebp), %edx
	xorl	%gs:20, %edx
	je	.L15
	call	__stack_chk_fail
.L15:
	movl	-4(%ebp), %ecx
	.cfi_def_cfa 1, 0
	leave
	.cfi_restore 5
	leal	-4(%ecx), %esp
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
.LFE7:
	.size	main, .-main
	.ident	"GCC: (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0"
	.section	.note.GNU-stack,"",@progbits
